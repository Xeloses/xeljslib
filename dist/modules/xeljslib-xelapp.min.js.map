{"version":3,"file":"xeljslib-xelapp.min.js","mappings":"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","sources":["webpack://xeljslib/./src/modules/xelapp/xelappstorage.js","webpack://xeljslib/./src/modules/xelapp/xelapp.js","webpack://xeljslib/./src/helpers/export-helper.js"],"sourcesContent":["/**\r\n * An object containing storage configuration options.\r\n *\r\n * @typedef  {Object}  XelStorageConfig\r\n * @property {boolean} [preferLocalStorage=false] - prefer to use browser' local storage (usable for userscripts).\r\n */\r\n\r\n/**\r\n * Upgrade/update storage function.\r\n *\r\n * @callback StorageUpgradeCallback\r\n * @param  {XelAppStorage} Application storage instance\r\n * @return {void}\r\n */\r\n\r\n/**\r\n * Upgrade/update storage function.\r\n *\r\n * @callback XelEventCallback\r\n * @param  {*}\r\n * @return {void}\r\n */\r\n\r\n/**\r\n * Script storage.\r\n *\r\n * @class     XelAppStorage\r\n * @classdesc Implements script storage (using browser' local storage or userscripts storage)\r\n */\r\nclass XelAppStorage\r\n{\r\n    /**\r\n     * @constructor\r\n     *\r\n     * @param {?number}                 [version=1]             Version of data in storage (used to determine if storage needs upgrade).\r\n     * @param {XelStorageConfig}        [config={}]             Storage configuration options (typedef: {@linkcode XelStorageConfig}).\r\n     * @param {?StorageUpgradeCallback} [upgradeCallback=null]  Storage upgrade/update function (typedef: {@linkcode StorageUpgradeCallback}), executed if version of data in storage is older than version passed to constructor.\r\n     * @memberof XelAppStorage\r\n     */\r\n    constructor( version = 1, config = {}, upgradeCallback = null )\r\n    {\r\n        const isUserscript = ( typeof GM_info !== 'undefined' ) && ( 'script' in GM_info ),\r\n            conf = Object.assign(\r\n                {\r\n                    // Default config:\r\n                    preferLocalStorage: false\r\n                },\r\n                config );\r\n\r\n        if( ( conf.preferLocalStorage || !isUserscript ) && this.__isLocalStorageAvailable() )\r\n        {\r\n            this.removeValue = localStorage.removeItem;\r\n            this.clearStorage = localStorage.clear;\r\n        }\r\n        else if( isUserscript && this.__isUserscriptStorageAvailable() )\r\n        {\r\n            this.removeValue = ( typeof GM_deleteValue !== 'undefined' ) ? GM_deleteValue : ( GM && typeof GM.deleteValue !== 'undefined' ? GM.deleteValue : null );\r\n            this.clearStorage = () =>\r\n            {\r\n                const keys = ( typeof GM_listValues !== 'undefined' ) ? GM_listValues() : ( GM && typeof GM.listValues !== 'undefined' ? GM.listValues() : null );\r\n                if( keys )\r\n                    for( const val of this._getKeys() )\r\n                        this.removeValue( val );\r\n            };\r\n        }\r\n        else\r\n            throw new Error( 'Storage is unavailable.' );\r\n\r\n        this.__version__ = this.__n( version );\r\n        this.__cache__ = new Map();\r\n\r\n        // update storage if new version:\r\n        if( this.__version__ > Number.parseFloat( this.getValue( '_v', 0 ) ) )\r\n        {\r\n            this.setValue( '_v', this.__version__ );\r\n            if( upgradeCallback ) upgradeCallback( this );\r\n        }\r\n    }\r\n\r\n    /* ===================== PRIVATE METHODS ===================== */\r\n\r\n    /**\r\n     * Check if Userscript Storage is available.\r\n     *\r\n     * @return {boolean}\r\n     * @memberof XelAppStorage\r\n     */\r\n    __isUserscriptStorageAvailable()\r\n    {\r\n        this.getValue = ( typeof GM_getValue !== 'undefined' ) ? GM_getValue : ( ( GM && typeof GM.getValue !== 'undefined' ) ? GM.getValue : null );\r\n        this.setValue = ( typeof GM_setValue !== 'undefined' ) ? GM_setValue : ( ( GM && typeof GM.setValue !== 'undefined' ) ? GM.setValue : null );\r\n        return ( this.getValue !== null && this.setValue !== null );\r\n    }\r\n\r\n    /**\r\n     * Check if localStorage is supported in the browser and available.\r\n     *\r\n     * @return {boolean}\r\n     * @memberof XelAppStorage\r\n     */\r\n    __isLocalStorageAvailable()\r\n    {\r\n        if( typeof localStorage !== 'undefined' )\r\n        {\r\n            try\r\n            {\r\n                let test = `test_${ location.hostname.replace( '.', '-' ) }_${ Date.now() }`;\r\n                localStorage.setItem( test, '_OK_' );\r\n                if( localStorage.getItem( test ) === '_OK_' )\r\n                {\r\n                    localStorage.removeItem( test );\r\n                    this.getValue = localStorage.getItem;\r\n                    this.setValue = localStorage.setItem;\r\n                    return true;\r\n                }\r\n            }\r\n            catch( e )\r\n            {\r\n                throw new Error( 'Storage API is unsupported, or blocked by browser privacy settings.' );\r\n            }\r\n        }\r\n        throw new Error( 'Storage API is unsupported.' );\r\n    }\r\n\r\n    /**\r\n     * Convert string representation of the version to the numeric (float) value.\r\n     *\r\n     * Numeric version format:\r\n     *   MNNNAAA.BBBB\r\n     * where\r\n     *   M    - Major version\r\n     *   NNN  - Minor version\r\n     *   AAA  - Patch version\r\n     *   BBBB - Build number\r\n     *\r\n     * Examples:\r\n     *   \"0.1.3\"      ->    1003\r\n     *   \"2.4.17\"     -> 2004017\r\n     *   \"1.7.12.206\" -> 1007012.206\r\n     *\r\n     * @param  {string} value\r\n     * @return {number}\r\n     * @memberof XelAppStorage\r\n     */\r\n    __n( value )\r\n    {\r\n        if( typeof value === 'number' ) return value;\r\n        if( value === null || Number.isNaN( value ) ) return 0;\r\n\r\n        const x = /(\\d+)\\.(\\d+)(\\.\\d+)?(\\.\\d+)?/.exec( value );\r\n        if( !x ) return 0;\r\n\r\n        return Number.parseFloat( x[ 1 ] ) * 1000000 +\r\n            ( typeof x[ 2 ] !== 'undefined' ? Number.parseInt( x[ 2 ] ) * 1000 : 0 ) +\r\n            ( typeof x[ 3 ] !== 'undefined' ? Number.parseInt( x[ 3 ].slice( 1 ) ) : 0 ) +\r\n            ( typeof x[ 4 ] !== 'undefined' ? Number.parseFloat( x[ 4 ] ) : 0 );\r\n    }\r\n\r\n    /**\r\n     * Trigger event.\r\n     *\r\n     * @param  {string}        name  Event name.\r\n     * @param  {*}             data  Param to be passed to event listener.\r\n     * @return {XelAppStorage}\r\n     * @memberof XelAppStorage\r\n     */\r\n    __t( name, data )\r\n    {\r\n        if( !this.__e__[ name ] || !this.__e__[ name ].length ) return;\r\n        this.__e__[ name ].forEach( callback => callback( data ) );\r\n        return this;\r\n    }\r\n\r\n    /* ===================== CLASS PROPERTIES ===================== */\r\n\r\n    get version() { return this.__version__; }\r\n\r\n    /* ===================== PUBLIC METHODS ===================== */\r\n\r\n    /**\r\n     * Check if value is exists in storage.\r\n     *\r\n     * @param  {string} name\r\n     * @return {boolean}\r\n     * @memberof XelAppStorage\r\n     */\r\n    has( name )\r\n    {\r\n        if( this.__cache__.has( name ) ) return true;\r\n\r\n        try\r\n        {\r\n            const value = this.get( name );\r\n            return ( value !== null && typeof value !== 'undefined' );\r\n        }\r\n        catch( e )\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Read value from storage.\r\n     *\r\n     * @param  {string} name\r\n     * @return {*}\r\n     * @memberof XelAppStorage\r\n     */\r\n    get( name )\r\n    {\r\n        try\r\n        {\r\n            const a = { name: name, value: ( this.__cache__.has( name ) ) ? this.__cache__.get( name ) : JSON.parse( this.getValue( name, null ) ) };\r\n\r\n            this.__t( 'read', a ); // trigger \"onread\" event\r\n\r\n            if( a.value !== null && typeof a.value !== 'undefined' )\r\n                this.__cache__.set( name, a.value ); // update cache\r\n\r\n            return a.value;\r\n        }\r\n        catch( e )\r\n        {\r\n            throw new Error( `Error reading data from Storage: {$e.message}` );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Store value into storage.\r\n     *\r\n     * @param  {string} name\r\n     * @param  {*}      value\r\n     * @return {Self}\r\n     * @memberof XelAppStorage\r\n     */\r\n    set( name, value )\r\n    {\r\n        try\r\n        {\r\n            const a = { name: name, value: value };\r\n\r\n            this.__t( 'write', a ); // trigger \"onwrite\" event\r\n\r\n            if( a.value !== null && typeof a.value !== 'undefined' )\r\n            {\r\n                this.__cache__.set( name, a.value ); // update cache\r\n                this.setValue( name, JSON.stringify( a.value ) );\r\n            }\r\n            else\r\n            {\r\n                this.delete( name );\r\n            }\r\n\r\n            return this;\r\n        }\r\n        catch( e )\r\n        {\r\n            throw new Error( `Error writing data to Storage: {$e.message}` );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove value from storage.\r\n     *\r\n     * @param  {string}        name\r\n     * @return {XelAppStorage}\r\n     * @memberof XelAppStorage\r\n     */\r\n    delete( name )\r\n    {\r\n        const a = { name: name, process: true };\r\n\r\n        this.__t( 'delete', a ); // trigger \"ondelete\" event\r\n\r\n        if( a.process )\r\n        {\r\n            this.__cache__.delete( name ); // update cache\r\n            this.removeValue( name );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove value from storage (alias of {@linkcode XelAppStorage.delete()}).\r\n     *\r\n     * @param  {string}        name\r\n     * @return {XelAppStorage}\r\n     * @memberof XelAppStorage\r\n     */\r\n    remove( name )\r\n    {\r\n        return this.delete( name );\r\n    }\r\n\r\n    /**\r\n     * Clear storage.\r\n     *\r\n     * @return {XelAppStorage}\r\n     * @memberof XelAppStorage\r\n     */\r\n    clear()\r\n    {\r\n        const a = { process: true };\r\n\r\n        this.__t( 'clear', a ); // trigger \"onclear\" event\r\n\r\n        if( a.process )\r\n        {\r\n            this.__cache__.clear(); // update cache\r\n            this.clearStorage();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add event listener.\r\n     *\r\n     * @param  {string}           name      Event name.\r\n     * @param  {XelEventCallback} callback  Callback function (typedef: {@linkcode XelEventCallback}).\r\n     * @return {XelAppStorage}\r\n     * @memberof XelAppStorage\r\n     */\r\n    addEventListener( name, callback )\r\n    {\r\n        if( !this.__e__[ name ] ) this.__e__[ name ] = [];\r\n        this.__e__[ name ].push( callback );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add event listener (alias of {@linkcode XelAppStorage.addEventListener()}).\r\n     *\r\n     * @param  {string}           name      Event name.\r\n     * @param  {XelEventCallback} callback  Callback function (typedef: {@linkcode XelEventCallback}).\r\n     * @return {XelAppStorage}\r\n     * @memberof XelAppStorage\r\n     */\r\n    on( name, callback ) { this.addEventListener( name, callback ); }\r\n}\r\n\r\nexport default XelAppStorage;\r\n","import XelAppStorage from './xelappstorage';\r\nimport { exportToBrowser } from '../../helpers/export-helper';\r\n\r\n/**\r\n * An object containing information about application.\r\n *\r\n * @typedef  {Object} XelAppInformation\r\n * @property {string} [name]        - Application name.\r\n * @property {string} [version]     - Application version.\r\n * @property {string} [description] - Description.\r\n * @property {string} [author]      - Author name.\r\n * @property {string} [url]         - Application homepage URL.\r\n * @property {string} [namespace]   - Application namespace.\r\n */\r\n\r\n/**\r\n * An object containing application configuration options.\r\n *\r\n * @typedef  {Object}  XelAppConfig\r\n * @property {string}  [logHeaderColor=c5c]       - Log messages header color (3-letters HEX).\r\n * @property {string}  [logTextColor=ddd]         - Log messages text color (3-letters HEX).\r\n * @property {boolean} [noConsole=false]          - Disable console output.\r\n * @property {boolean} [preferLocalStorage=false] - prefer to use browser' local storage (usable for userscripts).\r\n */\r\n\r\n/**\r\n * Upgrade/update storage function.\r\n *\r\n * @callback StorageUpgradeCallback\r\n * @param    {XelAppStorage} Application storage instance.\r\n * @return   {void}\r\n */\r\n\r\n/**\r\n * Script application.\r\n *\r\n * @class     XelApp\r\n * @classdesc Implements script application.\r\n */\r\nclass XelApp\r\n{\r\n    /**\r\n     * @constructor\r\n     *\r\n     * @param {XelAppInformation}       [data={}]                      Application information (typedef: {@linkcode XelAppInformation}); pass GM_info to use info from userscript' header.\r\n     * @param {XelAppConfig}            [config={}]                    Application configuraion (typedef: {@linkcode XelAppConfig}).\r\n     * @param {?StorageUpgradeCallback} [storageUpgradeCallback=null]  Storage upgrade/update function (typedef: {@linkcode StorageUpgradeCallback}), executed if version of data in storage is older than version passed to constructor.\r\n     * @memberof XelApp\r\n     */\r\n    constructor( data = {}, config = {}, storageUpgradeCallback = null )\r\n    {\r\n        const conf = Object.assign(\r\n            {\r\n                // Default config:\r\n                logHeaderColor: 'c5c',\r\n                logTextColor: 'ddd',\r\n                noConsole: false,\r\n                preferLocalStorage: false\r\n            },\r\n            config );\r\n\r\n        const UserscriptInfo = ( typeof GM_info !== 'undefined' && 'script' in GM_info ) ? GM_info : ( ( data && 'script' in data ) ? data : null );\r\n\r\n        this.__is_userscript__ = !!UserscriptInfo;\r\n\r\n        this.__name__ = data.name || ( this.__is_userscript__ ? UserscriptInfo.script.name : 'Script' );\r\n        this.__version__ = data.version || ( this.__is_userscript__ ? UserscriptInfo.script.version : '0.0.1' );\r\n        this.__author__ = data.author || ( this.__is_userscript__ ? UserscriptInfo.script.author : null );\r\n        this.__description__ = data.description || ( this.__is_userscript__ ? UserscriptInfo.script.description : null );\r\n        this.__url__ = data.url || ( this.__is_userscript__ ? UserscriptInfo.script.homepage : null );\r\n        this.__namespace__ = data.namespace || ( this.__is_userscript__ ? UserscriptInfo.script.namespace : ( this.__author__ ? `${ this.__author__.replace( /[^.\\-\\w]+/g, '' ) }.` : '' ) + this.__name__.replace( /[^.\\-\\w]+/g, '' ) );\r\n        this.__unique_id__ = this.__namespace__.replace( /[.\\-\\s]+/g, '_' ).replace( /[^\\w]+/g, '' ).toLowerCase();\r\n\r\n        this.__is_mobile_device__ = this.__isMobile();\r\n\r\n        this.__style__ = {\r\n            header: `color:#${ conf.logHeaderColor };font-weight:bold;`,\r\n            text: `color:#${ conf.logTextColor };font-weight:normal;`\r\n        }\r\n\r\n        this.__no_console__ = conf.noConsole;\r\n\r\n        this.__prefer_local_storage__ = conf.preferLocalStorage;\r\n\r\n        if( storageUpgradeCallback )\r\n            this.__onStorageUpgrade__ = storageUpgradeCallback;\r\n    }\r\n\r\n    /* ===================== PRIVATE METHODS ===================== */\r\n\r\n    /**\r\n     * Initialize app storage.\r\n     *\r\n     * @return {XelAppStorage}\r\n     * @memberof XelApp\r\n     */\r\n    __initStorage()\r\n    {\r\n        try\r\n        {\r\n            this.__storage__ = new XelAppStorage( this.__version__, { preferLocalStorage: this.__prefer_local_storage__ }, this.__onStorageUpgrade__ );\r\n            return this.__storage_;\r\n        }\r\n        catch( e )\r\n        {\r\n            const err = `Unable to initialize app storage: ${ e.message }`;\r\n            this.logError( err );\r\n            throw new Error( err );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if script running on mobile device.\r\n     *\r\n     * @return {boolean}\r\n     * @memberof XelApp\r\n     */\r\n    __isMobile()\r\n    {\r\n        if( 'maxTouchPoints' in navigator )\r\n            return ( navigator.maxTouchPoints > 0 );\r\n        else if( 'msMaxTouchPoints' in navigator )\r\n            return ( navigator.msMaxTouchPoints > 0 );\r\n        else\r\n        {\r\n            let mQ = window.matchMedia && matchMedia( '(pointer:coarse)' );\r\n            if( mQ && mQ.media === '(pointer:coarse)' )\r\n                return !!mQ.matches;\r\n            else if( 'orientation' in window ) // deprecated, uses as fallback\r\n                return true;\r\n            else if( 'userAgent' in navigator && navigator.userAgent ) // fallback to user agent sniffing\r\n                return /\\b(Android|Windows Phone|iPhone|iPad|iPod|webOS|BlackBerry|Opera Mini|IEMobile)\\b/i.test( navigator.userAgent );\r\n        }\r\n    }\r\n\r\n    /* ===================== CLASS PROPERTIES ===================== */\r\n\r\n    get name() { return this.__name__; }\r\n    get appName() { return this.__name__; }\r\n    get version() { return this.__version__; }\r\n    get ver() { return this.__version__; }\r\n    get author() { return this.__author__; }\r\n    get description() { return this.__description__; }\r\n    get url() { return this.__url__; }\r\n    get homepage() { return this.__url__; }\r\n    get namespace() { return this.__namespace__; }\r\n    get ns() { return this.__namespace__; }\r\n    get prefix() { return this.__unique_id__; }\r\n    get unique() { return this.__unique_id__; }\r\n\r\n    get isUserscript() { return this.__is_userscript__; }\r\n    get isMobile() { return this.__is_mobile_device__; }\r\n\r\n    get storage() { return ( '__storage__' in this ) ? this.__storage__ : this.__initStorage(); }\r\n\r\n    /* ===================== PUBLIC METHODS ===================== */\r\n\r\n    /**\r\n     * Wait for page loading/processing.\r\n     *\r\n     * @param  {string}            sel  CSS selector of element to wait for.\r\n     * @param  {CallableFunction}  cb   Callback function.\r\n     * @return {void}\r\n     * @memberof XelApp\r\n     */\r\n    waitPageLoading( sel, cb )\r\n    {\r\n        document.querySelector( sel ) ? cb() : setTimeout( this.waitPageLoading( sel, cb ), 330 );\r\n    }\r\n\r\n    /**\r\n     * Create new Node.\r\n     *\r\n     * @param {?string}                        [node='DIV']       Node type (use \"text\" to create TextNode; default: \"DIV\").\r\n     * @param {?(string|Node|string[]|Node[])} [content=null]     Node or Text or Array of elements (Nodes and/or Text) to insert into created Node (default: no content, creates empty node).\r\n     * @param {?object}                        [attributes=null]  Optional list of node attributes (default: no attributes).\r\n     * @param {?string}                        [namespace=null]   Optional Node namespace (usable only for <svg> nodes; default: no namespace).\r\n     * @return {Node}\r\n     * @memberof XelApp\r\n     */\r\n    createNode( node = 'DIV', content = null, attributes = null, namespace = null )\r\n    {\r\n        if( node === null || node.toUpperCase() === 'TEXT' )\r\n            return document.createTextNode( content ? content : '' );\r\n        else\r\n        {\r\n            const el = namespace ? document.createElementNS( namespace, node ) : document.createElement( node );\r\n\r\n            // add \"xmlns:xlink\" to <SVG> node:\r\n            if( namespace && node.toUpperCase() == 'SVG' )\r\n                el.setAttributeNS( 'http://www.w3.org/2000/xmlns/', 'xmlns:xlink', 'http://www.w3.org/1999/xlink' );\r\n\r\n            if( attributes )\r\n                for( const [ name, value ] of Object.entries( attributes ) )\r\n                {\r\n                    if( name == 'data' )\r\n                    {\r\n                        for( const [ dname, dvalue ] of Object.entries( value ) )\r\n                            el.dataset[ dname ] = dvalue;\r\n                    }\r\n                    else\r\n                        el.setAttribute( name, value );\r\n                }\r\n\r\n            if( content )\r\n            {\r\n                if( Array.isArray( content ) )\r\n                    content.forEach( ( item ) => { el.appendChild( ( typeof item === 'string' ) ? document.createTextNode( item ) : item ) } );\r\n                else\r\n                    el.appendChild( ( typeof content === 'string' ) ? document.createTextNode( content ) : content );\r\n            }\r\n\r\n            return el;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Inject CSS into page (create <style> element with CSS).\r\n     *\r\n     * @param  {string}   css                        CSS code to inject.\r\n     * @param  {?string}  [id=null]                  Optional ID for injected CSS (\"id\" attribute of <style> tag).\r\n     * @param  {?string}  [media=null]               Optional Media type of injecting CSS (\"media\" attribute of <style> tag; default: \"screen\").\r\n     * @param  {boolean}  [preserve_comments=false]  Preserve or remove comments from CSS code before inject (default: remove comments).\r\n     * @return {Node}\r\n     * @memberof XelApp\r\n     */\r\n    injectCSS( css, id = null, media = null, preserve_comments = false )\r\n    {\r\n        if( document.querySelector( id ) ) return;\r\n\r\n        // replace tabulators and new lines with space, remove comments and double spaces:\r\n        css = ( preserve_comments ? css : css.replace( /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g, '' ) )\r\n            .replace( /[\\t\\n]/g, ' ' )\r\n            .replace( /[\\s]{2,}/g, ' ' );\r\n\r\n        let el = this.createNode( 'STYLE', css, { type: 'text/css' } );\r\n        if( id ) el.id = id;\r\n        if( media ) el.media = media;\r\n        document.head.appendChild( el );\r\n        return el;\r\n    }\r\n\r\n    /* eslint-disable no-console */\r\n\r\n    /**\r\n     * Log to console.\r\n     *\r\n     * @param  {string} message\r\n     * @return {void}\r\n     * @memberof XelApp\r\n     */\r\n    log( message )\r\n    {\r\n        if( this.__no_console__ ) return;\r\n        console.log( `%c[${ this.name }]%c ${ message }`, this.__style__.header, this.__style__.text );\r\n    }\r\n\r\n    /**\r\n     * Dump variable to console.\r\n     *\r\n     * @param  {any}     value           Variable to dump.\r\n     * @param  {?string} [comment=null]  Optional comment.\r\n     * @return {void}\r\n     * @memberof XelApp\r\n     */\r\n    dump( value, comment = null )\r\n    {\r\n        if( this.__no_console__ ) return;\r\n        if( comment ) this.log( comment );\r\n        console.log( value );\r\n    }\r\n\r\n    /**\r\n     * Log info to console.\r\n     *\r\n     * @param  {string} message\r\n     * @return {void}\r\n     * @memberof XelApp\r\n     */\r\n    logInfo( message )\r\n    {\r\n        if( this.__no_console__ ) return;\r\n        console.info( `%c[${ this.name }]%c ${ message }`, this.__style__.header, `${ this.__style__.text }font-style:italic;` );\r\n    }\r\n\r\n    /**\r\n     * Log warning to console.\r\n     *\r\n     * @param  {string} message\r\n     * @return {void}\r\n     * @memberof XelApp\r\n     */\r\n    logWarn( message )\r\n    {\r\n        if( this.__no_console__ ) return;\r\n        console.warn( `%c[${ this.name }]%c ${ message }`, this.__style__.header, this.__style__.text );\r\n    }\r\n\r\n    /**\r\n     * Log error to console.\r\n     *\r\n     * @param  {string} message\r\n     * @return {void}\r\n     * @memberof XelApp\r\n     */\r\n    logError( message )\r\n    {\r\n        if( this.__no_console__ ) return;\r\n        console.error( `%c[${ this.name }]%c ${ message }`, this.__style__.header, this.__style__.text );\r\n    }\r\n\r\n    /**\r\n     * Write application loading message to console.\r\n     *\r\n     * @return {void}\r\n     * @memberof XelApp\r\n     */\r\n    logInit()\r\n    {\r\n        this.logInfo( `App loaded (version: ${ this.version })` );\r\n    }\r\n\r\n    /* eslint-enable no-console */\r\n}\r\n\r\nexportToBrowser( { 'XelApp': XelApp } );\r\n\r\nexport default XelApp;\r\n","/**\r\n * @typedef  {Object} ExportingList\r\n * @property {*} exported_unit_name Name of the exported unit.\r\n */\r\n\r\n/**\r\n * Exports source units (classes/functions/consts/...) to the browser.\r\n * Source units will be available in global scope as children of {window} and/or {unsafeWindow} (for userscripts).\r\n *\r\n * @param {ExportingList} exporting  List ({@link ExportingList}) of exporting units (as pairs: **{ {string} Name: {any} Unit }**).\r\n *                                   Source units will be exported with given names\r\n *                                   *(all symbols in names except alphanumeric and underscore will be converted to underscores)*.\r\n * @return {void}\r\n */\r\nfunction exportToBrowser( exporting )\r\n{\r\n    for( const key in exporting )\r\n    {\r\n        const name = key.replace( /[^\\w]+/g, '_' ).replace( /_+/g, '_' );\r\n\r\n        if( typeof unsafeWindow !== 'undefined' ) { unsafeWindow[ name ] = exporting[ key ]; }\r\n        if( typeof window !== 'undefined' ) { window[ name ] = exporting[ key ]; }\r\n    }\r\n}\r\n\r\nexport { exportToBrowser };\r\n"],"names":["constructor","version","config","upgradeCallback","isUserscript","GM_info","Object","assign","preferLocalStorage","this","__isLocalStorageAvailable","__isUserscriptStorageAvailable","Error","removeValue","GM_deleteValue","GM","deleteValue","clearStorage","GM_listValues","listValues","val","_getKeys","localStorage","removeItem","clear","__version__","__n","__cache__","Map","Number","parseFloat","getValue","setValue","GM_getValue","GM_setValue","test","location","hostname","replace","Date","now","setItem","getItem","e","value","isNaN","x","exec","parseInt","slice","__t","name","data","__e__","length","forEach","callback","has","get","a","JSON","parse","set","stringify","delete","process","remove","addEventListener","push","on","XelApp","storageUpgradeCallback","conf","logHeaderColor","logTextColor","noConsole","UserscriptInfo","__is_userscript__","__name__","script","__author__","author","__description__","description","__url__","url","homepage","__namespace__","namespace","__unique_id__","toLowerCase","__is_mobile_device__","__isMobile","__style__","header","text","__no_console__","__prefer_local_storage__","__onStorageUpgrade__","__initStorage","__storage__","__storage_","err","message","logError","navigator","maxTouchPoints","msMaxTouchPoints","mQ","window","matchMedia","media","matches","userAgent","appName","ver","ns","prefix","unique","isMobile","storage","waitPageLoading","sel","cb","document","querySelector","setTimeout","createNode","node","content","attributes","toUpperCase","createTextNode","el","createElementNS","createElement","setAttributeNS","entries","dname","dvalue","dataset","setAttribute","Array","isArray","item","appendChild","injectCSS","css","id","preserve_comments","type","head","log","console","dump","comment","logInfo","info","logWarn","warn","error","logInit","exporting","key","unsafeWindow","exportToBrowser"],"sourceRoot":""}